; Variable declarations
(declare-fun C1_VM1 () Int)
(declare-fun C1_VM2 () Int)
(declare-fun C1_VM3 () Int)
(declare-fun C1_VM4 () Int)
(declare-fun C2_VM1 () Int)
(declare-fun C2_VM2 () Int)
(declare-fun C2_VM3 () Int)
(declare-fun C2_VM4 () Int)
(declare-fun C3_VM1 () Int)
(declare-fun C3_VM2 () Int)
(declare-fun C3_VM3 () Int)
(declare-fun C3_VM4 () Int)
(declare-fun C4_VM1 () Int)
(declare-fun C4_VM2 () Int)
(declare-fun C4_VM3 () Int)
(declare-fun C4_VM4 () Int)
(declare-fun cpu_C1 () Int)
(declare-fun mem_C1 () Int)
(declare-fun storage_C1 () Int)
(declare-fun cpu_C2 () Int)
(declare-fun mem_C2 () Int)
(declare-fun storage_C2 () Int)
(declare-fun cpu_C3 () Int)
(declare-fun mem_C3 () Int)
(declare-fun storage_C3 () Int)
(declare-fun cpu_C4 () Int)
(declare-fun mem_C4 () Int)
(declare-fun storage_C4 () Int)
(declare-fun VM1Type () Int)
(declare-fun VM2Type () Int)
(declare-fun VM3Type () Int)
(declare-fun VM4Type () Int)
(declare-fun price_VM1 () Int)
(declare-fun price_VM2 () Int)
(declare-fun price_VM3 () Int)
(declare-fun price_VM4 () Int)
(declare-fun cpu_VM1 () Int)
(declare-fun cpu_VM2 () Int)
(declare-fun cpu_VM3 () Int)
(declare-fun cpu_VM4 () Int)
(declare-fun mem_VM1 () Int)
(declare-fun mem_VM2 () Int)
(declare-fun mem_VM3 () Int)
(declare-fun mem_VM4 () Int)
(declare-fun storage_VM1 () Int)
(declare-fun storage_VM2 () Int)
(declare-fun storage_VM3 () Int)
(declare-fun storage_VM4 () Int)


; Constraints
(assert (or (= C1_VM1 0) (= C1_VM1 1)))	
(assert (or (= C1_VM2 0) (= C1_VM2 1)))	
(assert (or (= C1_VM3 0) (= C1_VM3 1)))	
(assert (or (= C1_VM4 0) (= C1_VM4 1)))

(assert (or (= C2_VM1 0) (= C2_VM1 1)))	
(assert (or (= C2_VM2 0) (= C2_VM2 1)))	
(assert (or (= C2_VM3 0) (= C2_VM3 1)))	
(assert (or (= C2_VM4 0) (= C2_VM4 1)))

(assert (or (= C3_VM1 0) (= C3_VM1 1)))	
(assert (or (= C3_VM2 0) (= C3_VM2 1)))	
(assert (or (= C3_VM3 0) (= C3_VM3 1)))	
(assert (or (= C3_VM4 0) (= C3_VM4 1)))

(assert (or (= C4_VM1 0) (= C4_VM1 1)))	
(assert (or (= C4_VM2 0) (= C4_VM2 1)))	
(assert (or (= C4_VM3 0) (= C4_VM3 1)))	
(assert (or (= C4_VM4 0) (= C4_VM4 1)))

(assert (=> (= C1_VM1 1) (not (= VM1Type 0))))	
(assert (=> (= C1_VM2 1) (not (= VM2Type 0))))	
(assert (=> (= C1_VM3 1) (not (= VM3Type 0))))	
(assert (=> (= C1_VM4 1) (not (= VM4Type 0))))

(assert (=> (= C2_VM1 1) (not (= VM1Type 0))))	
(assert (=> (= C2_VM2 1) (not (= VM2Type 0))))	
(assert (=> (= C2_VM3 1) (not (= VM3Type 0))))	
(assert (=> (= C2_VM4 1) (not (= VM4Type 0))))

(assert (=> (= C3_VM1 1) (not (= VM1Type 0))))	
(assert (=> (= C3_VM2 1) (not (= VM2Type 0))))	
(assert (=> (= C3_VM3 1) (not (= VM3Type 0))))	
(assert (=> (= C3_VM4 1) (not (= VM4Type 0))))

(assert (=> (= C4_VM1 1) (not (= VM1Type 0))))	
(assert (=> (= C4_VM2 1) (not (= VM2Type 0))))	
(assert (=> (= C4_VM3 1) (not (= VM3Type 0))))	
(assert (=> (= C4_VM4 1) (not (= VM4Type 0))))

(assert (or (= cpu_C1 8)))
(assert (or (= cpu_C2 4)))
(assert (or (= cpu_C3 6)))
(assert (or (= cpu_C4 16)))

(assert (or (= mem_C1 12000)))
(assert (or (= mem_C2 20000)))
(assert (or (= mem_C3 35000)))
(assert (or (= mem_C4 50000)))

(assert (or (= storage_C1 300)))
(assert (or (= storage_C2 150)))
(assert (or (= storage_C3 200)))
(assert (or (= storage_C4 500)))

(assert (>= price_VM1 0))	
(assert (>= price_VM2 0))	
(assert (>= price_VM3 0))	
(assert (>= price_VM4 0))

(assert (=> (= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 0) (= price_VM1 0)))	
(assert (=> (= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 0) (= price_VM2 0)))	
(assert (=> (= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 0) (= price_VM3 0)))	
(assert (=> (= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 0) (= price_VM4 0)))

(assert (=> (and (>= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 1) (= VM1Type 1))	
    (and (= price_VM1 700)	
         (= cpu_VM1 64)	
         (= mem_VM1 976000)	
         (= storage_VM1 1000))))

(assert (=> (and (>= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 1) (= VM1Type 2))	
    (and (= price_VM1 893)	
         (= cpu_VM1 32)	
         (= mem_VM1 488000)	
         (= storage_VM1 2000))))

(assert (=> (and (>= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 1) (= VM1Type 3))	
    (and (= price_VM1 1003)	
         (= cpu_VM1 64)	
         (= mem_VM1 900000)	
         (= storage_VM1 3000))))

(assert (=> (and (>= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 1) (= VM1Type 4))	
    (and (= price_VM1 993)	
         (= cpu_VM1 64)	
         (= mem_VM1 700000)	
         (= storage_VM1 1550))))

(assert (=> (and (>= (+ 0 C1_VM1 C2_VM1 C3_VM1 C4_VM1) 1) (= VM1Type 5))	
    (and (= price_VM1 673)	
         (= cpu_VM1 16)	
         (= mem_VM1 476000)	
         (= storage_VM1 1000))))

(assert (or (= VM1Type 1)	
    (= VM1Type 2)	
    (= VM1Type 3)	
    (= VM1Type 4)	
    (= VM1Type 5)))

(assert (=> (and (>= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 1) (= VM2Type 1))	
    (and (= price_VM2 1403)	
         (= cpu_VM2 64)	
         (= mem_VM2 999000)	
         (= storage_VM2 3000))))

(assert (=> (and (>= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 1) (= VM2Type 2))	
    (and (= price_VM2 843)	
         (= cpu_VM2 16)	
         (= mem_VM2 919000)	
         (= storage_VM2 4000))))

(assert (=> (and (>= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 1) (= VM2Type 3))	
    (and (= price_VM2 733)	
         (= cpu_VM2 32)	
         (= mem_VM2 120000)	
         (= storage_VM2 500))))

(assert (=> (and (>= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 1) (= VM2Type 4))	
    (and (= price_VM2 313)	
         (= cpu_VM2 8)	
         (= mem_VM2 183992)	
         (= storage_VM2 700))))

(assert (=> (and (>= (+ 0 C1_VM2 C2_VM2 C3_VM2 C4_VM2) 1) (= VM2Type 5))	
    (and (= price_VM2 312)	
         (= cpu_VM2 4)	
         (= mem_VM2 322000)	
         (= storage_VM2 1000))))

(assert (or (= VM2Type 1)	
    (= VM2Type 2)	
    (= VM2Type 3)	
    (= VM2Type 4)	
    (= VM2Type 5)))

(assert (=> (and (>= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 1) (= VM3Type 1))	
    (and (= price_VM3 1923)	
         (= cpu_VM3 128)	
         (= mem_VM3 1000000)	
         (= storage_VM3 4000))))

(assert (=> (and (>= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 1) (= VM3Type 2))	
    (and (= price_VM3 1103)	
         (= cpu_VM3 64)	
         (= mem_VM3 1000000)	
         (= storage_VM3 1000))))

(assert (=> (and (>= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 1) (= VM3Type 3))	
    (and (= price_VM3 800)	
         (= cpu_VM3 32)	
         (= mem_VM3 700000)	
         (= storage_VM3 2000))))

(assert (=> (and (>= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 1) (= VM3Type 4))	
    (and (= price_VM3 123)	
         (= cpu_VM3 4)	
         (= mem_VM3 80000)	
         (= storage_VM3 1000))))

(assert (=> (and (>= (+ 0 C1_VM3 C2_VM3 C3_VM3 C4_VM3) 1) (= VM3Type 5))	
    (and (= price_VM3 1893)	
         (= cpu_VM3 128)	
         (= mem_VM3 900000)	
         (= storage_VM3 3000))))

(assert (or (= VM3Type 1)	
    (= VM3Type 2)	
    (= VM3Type 3)	
    (= VM3Type 4)	
    (= VM3Type 5)))

(assert (=> (and (>= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 1) (= VM4Type 1))	
    (and (= price_VM4 1003)	
         (= cpu_VM4 64)	
         (= mem_VM4 850000)	
         (= storage_VM4 2000))))

(assert (=> (and (>= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 1) (= VM4Type 2))	
    (and (= price_VM4 903)	
         (= cpu_VM4 32)	
         (= mem_VM4 450000)	
         (= storage_VM4 3000))))

(assert (=> (and (>= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 1) (= VM4Type 3))	
    (and (= price_VM4 803)	
         (= cpu_VM4 32)	
         (= mem_VM4 950000)	
         (= storage_VM4 1000))))

(assert (=> (and (>= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 1) (= VM4Type 4))	
    (and (= price_VM4 2400)	
         (= cpu_VM4 128)	
         (= mem_VM4 1250000)	
         (= storage_VM4 4000))))

(assert (=> (and (>= (+ 0 C1_VM4 C2_VM4 C3_VM4 C4_VM4) 1) (= VM4Type 5))	
    (and (= price_VM4 1031)	
         (= cpu_VM4 128)	
         (= mem_VM4 850000)	
         (= storage_VM4 1000))))

(assert (or (= VM4Type 1)	
    (= VM4Type 2)	
    (= VM4Type 3)	
    (= VM4Type 4)	
    (= VM4Type 5)))

	
(assert (<= (+ 0 C1_VM1 C2_VM1) 1))
(assert (<= (+ 0 C1_VM2 C2_VM2) 1))
(assert (<= (+ 0 C1_VM3 C2_VM3) 1))
(assert (<= (+ 0 C1_VM4 C2_VM4) 1))

(assert (<= (+ 0 C1_VM1 C3_VM1) 1))
(assert (<= (+ 0 C1_VM2 C3_VM2) 1))
(assert (<= (+ 0 C1_VM3 C3_VM3) 1))
(assert (<= (+ 0 C1_VM4 C3_VM4) 1))

(assert (<= (+ 0 C1_VM1 C4_VM1) 1))
(assert (<= (+ 0 C1_VM2 C4_VM2) 1))
(assert (<= (+ 0 C1_VM3 C4_VM3) 1))
(assert (<= (+ 0 C1_VM4 C4_VM4) 1))

(assert (<= (+ 0 C2_VM1 C3_VM1) 1))
(assert (<= (+ 0 C2_VM2 C3_VM2) 1))
(assert (<= (+ 0 C2_VM3 C3_VM3) 1))
(assert (<= (+ 0 C2_VM4 C3_VM4) 1))

(assert (>= (+ 0	
       C2_VM1	
       C2_VM2	
       C2_VM3	
       C2_VM4		
       C3_VM1	
       C3_VM2	
       C3_VM3	
       C3_VM4)	
    2))

(assert (> (- (* 5 (+ 0 C2_VM1 C2_VM2 C2_VM3 C2_VM4))	
      (+ 0 C3_VM1 C3_VM2 C3_VM3 C3_VM4))	
   0))	
(assert (<= (- (* 5 (+ 0 C2_VM1 C2_VM2 C2_VM3 C2_VM4))	
      (+ 0 C3_VM1 C3_VM2 C3_VM3 C3_VM4))	
   5))

(assert (>= (+ 0 C1_VM1 C1_VM2 C1_VM3 C1_VM4) 1))	
(assert (>= (+ 0 C2_VM1 C2_VM2 C2_VM3 C2_VM4) 1))	
(assert (>= (+ 0 C3_VM1 C3_VM2 C3_VM3 C3_VM4) 1))	
(assert (>= (+ 0 C4_VM1 C4_VM2 C4_VM3 C4_VM4) 1))

(assert (<= (+ 0 (* C1_VM1 cpu_C1) (* C2_VM1 cpu_C2) (* C3_VM1 cpu_C3) (* C4_VM1 cpu_C4))	cpu_VM1))
(assert (<= (+ 0 (* C1_VM1 mem_C1) (* C2_VM1 mem_C2) (* C3_VM1 mem_C3) (* C4_VM1 mem_C4))	mem_VM1))
(assert (<= (+ 0 (* C1_VM1 storage_C1) (* C2_VM1 storage_C2) (* C3_VM1 storage_C3) (* C4_VM1 storage_C4)) storage_VM1))

(assert (<= (+ 0 (* C1_VM2 cpu_C1) (* C2_VM2 cpu_C2) (* C3_VM2 cpu_C3) (* C4_VM2 cpu_C4))	cpu_VM2))
(assert (<= (+ 0 (* C1_VM2 mem_C1) (* C2_VM2 mem_C2) (* C3_VM2 mem_C3) (* C4_VM2 mem_C4))	mem_VM2))
(assert (<= (+ 0 (* C1_VM2 storage_C1) (* C2_VM2 storage_C2) (* C3_VM2 storage_C3) (* C4_VM2 storage_C4)) storage_VM2))

(assert (<= (+ 0 (* C1_VM3 cpu_C1) (* C2_VM3 cpu_C2) (* C3_VM3 cpu_C3) (* C4_VM3 cpu_C4))	cpu_VM3))
(assert (<= (+ 0 (* C1_VM3 mem_C1) (* C2_VM3 mem_C2) (* C3_VM3 mem_C3) (* C4_VM3 mem_C4))	mem_VM3))
(assert (<= (+ 0 (* C1_VM3 storage_C1) (* C2_VM3 storage_C2) (* C3_VM3 storage_C3) (* C4_VM3 storage_C4)) storage_VM3))

(assert (<= (+ 0 (* C1_VM4 cpu_C1) (* C2_VM4 cpu_C2) (* C3_VM4 cpu_C3) (* C4_VM4 cpu_C4))	cpu_VM4))
(assert (<= (+ 0 (* C1_VM4 mem_C1) (* C2_VM4 mem_C2) (* C3_VM4 mem_C3) (* C4_VM4 mem_C4))	mem_VM4))
(assert (<= (+ 0 (* C1_VM4 storage_C1) (* C2_VM4 storage_C2) (* C3_VM4 storage_C3) (* C4_VM4 storage_C4)) storage_VM4))

(minimize (+ 0 price_VM1 price_VM2 price_VM3 price_VM4))
(check-sat)
